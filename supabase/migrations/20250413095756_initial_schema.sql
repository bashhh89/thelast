-- Create profiles table linked to auth.users
create table public.profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,

  constraint username_length check (char_length(username) >= 3)
);

alter table public.profiles enable row level security;

-- Create workspaces table
create table public.workspaces (
  id uuid default gen_random_uuid() primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  owner_id uuid references public.profiles not null,
  name text not null,
  description text
);

alter table public.workspaces enable row level security;

-- Create chat_sessions table
create table public.chat_sessions (
  id uuid default gen_random_uuid() primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  workspace_id uuid references public.workspaces on delete cascade not null,
  user_id uuid references public.profiles not null,
  project_id uuid references public.projects on delete set null,
  title text,
  last_message_at timestamp with time zone
);

-- Enable RLS
-- alter table public.chat_sessions enable row level security; -- Temporarily Disabled for debugging
alter table public.chat_sessions disable row level security; -- Temporarily Disable RLS

-- Create messages table
create table public.messages (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  session_id uuid references public.chat_sessions on delete cascade not null,
  user_id uuid references public.profiles not null,
  content text not null,
  role text check (role in ('user', 'assistant', 'system')) not null, -- Assuming user/AI roles
  metadata jsonb -- For storing model info, etc.
);

-- Enable RLS
-- alter table public.messages enable row level security; -- Temporarily Disabled for debugging
alter table public.messages disable row level security; -- Temporarily Disable RLS

-- Function to auto-create profile on user signup
create function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url) -- Optionally pull initial values
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to call the function on new user insert
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- RLS Policies (Temporarily disabled - will need to be re-enabled and fixed later)

-- Profiles: Users can view their own profile, update their own profile.
create policy "Users can view their own profile." on public.profiles for select
  using ( auth.uid() = id );

create policy "Users can update their own profile." on public.profiles for update
  using ( auth.uid() = id );

-- Workspaces: Users can CRUD workspaces they own.
create policy "Users can create their own workspaces." on public.workspaces for insert
  with check ( auth.uid() = owner_id );

-- Updated Workspace Select Policy: Allow members to view workspaces they belong to
drop policy if exists "Users can view their own workspaces." on public.workspaces;
create policy "Users can view workspaces they are members of." on public.workspaces for select
  using ( exists (select 1 from public.workspace_members where workspace_id = id and user_id = auth.uid()) or owner_id = auth.uid() );

create policy "Users can update their own workspaces." on public.workspaces for update
  using ( auth.uid() = owner_id );

create policy "Users can delete their own workspaces." on public.workspaces for delete
  using ( auth.uid() = owner_id );

-- Chat Sessions Policies (Commented out due to disabling RLS on table)
-- drop policy if exists "Users can create their own chat sessions." on public.chat_sessions;
-- drop policy if exists "Users can view their own chat sessions." on public.chat_sessions;
-- drop policy if exists "Users can update their own chat sessions." on public.chat_sessions;
-- drop policy if exists "Users can delete their own chat sessions." on public.chat_sessions;
-- create policy "Users can create chat sessions in their workspaces." on public.chat_sessions for insert
--  with check ( auth.uid() = user_id and exists (select 1 from public.workspace_members where workspace_members.workspace_id = chat_sessions.workspace_id and workspace_members.user_id = auth.uid()) );
-- create policy "Users can view chat sessions in their workspaces." on public.chat_sessions for select
--  using ( exists (select 1 from public.workspace_members where workspace_members.workspace_id = chat_sessions.workspace_id and workspace_members.user_id = auth.uid()) );
-- create policy "Users can update chat sessions in their workspaces." on public.chat_sessions for update
--  using ( auth.uid() = user_id and exists (select 1 from public.workspace_members where workspace_members.workspace_id = chat_sessions.workspace_id and workspace_members.user_id = auth.uid()) );
-- create policy "Users can delete chat sessions in their workspaces." on public.chat_sessions for delete
--  using ( auth.uid() = user_id and exists (select 1 from public.workspace_members where workspace_members.workspace_id = chat_sessions.workspace_id and workspace_members.user_id = auth.uid()) );

-- Messages Policies (Commented out due to disabling RLS on table)
-- drop policy if exists "Users can create messages in their sessions." on public.messages;
-- drop policy if exists "Users can view messages in their sessions." on public.messages;
-- create policy "Users can create messages in sessions within their workspaces." on public.messages for insert
--  with check ( auth.uid() = user_id and exists (
--    select 1 from public.chat_sessions cs
--    join public.workspace_members wm on cs.workspace_id = wm.workspace_id
--    where cs.id = messages.session_id and wm.user_id = auth.uid()
--  ));
-- create policy "Users can view messages in sessions within their workspaces." on public.messages for select
--  using ( exists (
--    select 1 from public.chat_sessions cs
--    join public.workspace_members wm on cs.workspace_id = wm.workspace_id
--    where cs.id = messages.session_id and wm.user_id = auth.uid()
--  ));
